import com.github.jk1.license.render.CsvReportRenderer

configurations {
	jaxb
	ktlint
	all {
		exclude group: 'log4j', module: 'log4j'
		exclude module: 'spring-boot-starter-tomcat'
		exclude group: 'org.apache.tomcat'
	}
}

buildscript {
	ext {
		kotlinVersion = '1.3.50'
		springBootVersion = '2.0.9.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url = "https://maven.taktik.be/content/groups/public"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE')
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath('com.taktik.gradle:gradle-plugin-docker-java:1.2.0')
		classpath('com.taktik.gradle:gradle-plugin-git-version:2.0.1')
		classpath('com.github.ben-manes:gradle-versions-plugin:0.17.0') // version 0.18.0 is incompatible with Spring Boot (see https://github.com/spring-gradle-plugins/spring-build-conventions/issues/44)
		classpath("com.github.jk1:gradle-license-report:1.17")
	}
}

apply plugin: 'git-version'
group = 'org.taktik'
version = gitVersion
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker-java'
apply plugin: 'com.github.jk1.dependency-license-report'
dockerJava.imageGroup = 'icure'

licenseReport {
	renderers = [new CsvReportRenderer()]
}

ext {
	name = 'freehealth-connector'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

bootJar {
	manifest {
		attributes(
				'Built-By'       : System.getProperties()["user.name"],
				'Build-Revision'  : gitVersion,
				'Created-By'      : "Gradle ${gradle.gradleVersion}",
				'Build-Jdk'       : "${System.getProperties()["java.version"]} (${System.getProperties()["java.vendor"]} ${System.getProperties()["java.vm.version"]})",
				'Build-OS'        : "${System.getProperties()["os.name"]} ${System.getProperties()["os.arch"]} ${System.getProperties()["os.version"]}"
		)
	}
}

jar {
	manifest {
		attributes(
				'Built-By'       : System.getProperties()["user.name"],
				'Build-Revision'  : gitVersion,
				'Created-By'      : "Gradle ${gradle.gradleVersion}",
				'Build-Jdk'       : "${System.getProperties()["java.version"]} (${System.getProperties()["java.vendor"]} ${System.getProperties()["java.vm.version"]})",
				'Build-OS'        : "${System.getProperties()["os.name"]} ${System.getProperties()["os.arch"]} ${System.getProperties()["os.version"]}"
		)
	}
}

repositories {
	mavenCentral()
	jcenter()
	maven {
		url = "https://maven.taktik.be/content/groups/public"
	}
	flatDir {
		dirs 'libs'
	}
}

// tag::wsdl[]
//TODO: Generate all jaxb classes from wsdls
task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "src/resources/WSDL/sts_v1.wsdl"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema) {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}
// end::wsdl[]

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    ktlint "com.github.shyiko:ktlint:0.22.0"

	compile("com.taktik.boot:spring-boot-starter-micrometer:2.1-90-gcc5c980239")
	compile('org.springframework.boot:spring-boot-starter-jetty')
	compile('org.springframework.boot:spring-boot-starter-web'){
		exclude module: "spring-boot-starter-tomcat"
	}
	compile('org.springframework.boot:spring-boot-starter-websocket') {
		exclude module: "spring-boot-starter-tomcat"
	}
	compile('org.springframework.boot:spring-boot-starter-security')
	compile("org.springframework.ws:spring-ws-core")
	compile("org.springframework.ws:spring-ws-security")
	compile("org.springframework:spring-orm")

	compile("com.nimbusds:nimbus-jose-jwt:9.7")
	compile("com.nimbusds:oauth2-oidc-sdk:9.2.1")

	compile('com.taktik.boot:spring-boot-starter-hazelcast:2.1-0-g4d5d84ad53') {
		exclude module: "kotlin-runtime"
	}
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	compile group: 'org.bouncycastle', name: 'bcmail-jdk15on', version: '1.54'
	compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.54'
	compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.54'
	compile('be.fedict.commons-eid:commons-eid-client:0.6.6')
	compile('be.fedict.commons-eid:commons-eid-jca:0.6.6')
	compile('be.fgov.ehealth.etee:etee-crypto-lib:2.1.1')
	compile('org.apache.commons:commons-text:1.1')
	compile('org.apache.commons:commons-collections4:4.0')
	compile('org.apache.commons:commons-compress:1.10')
	compile('org.apache.ws.security:wss4j:1.6.18')
	compile('org.apache.wss4j:wss4j-ws-security-common:2.0.10')
	compile('org.apache.wss4j:wss4j-ws-security-dom:2.0.10')
	compile('net.sf.jsignature.io-tools:easystream:1.2.12')
	compile('uk.org.lidalia:sysout-over-slf4j:1.0.2') //WTF... This must go away
	compile('commons-lang:commons-lang:2.6')
	compile('org.apache.velocity:velocity:1.7') //WTF... This must go away
	compile('commons-io:commons-io:2.5')
	compile('commons-codec:commons-codec:1.10')
	compile('joda-time:joda-time:2.9')
	compile group: 'com.sun.xml.messaging.saaj', name: 'saaj-impl', version: '1.3.28'
	compile('com.sun.xml.wss:xws-security:3.0')
	compile('com.hazelcast:hazelcast:3.9.4')
	compile('com.google.code.gson:gson:2.7')
	compile('net.sf.dozer:dozer:5.5.1') //WTF... This must go away
	compile group: 'ma.glasnost.orika', name: 'orika-core', version: '1.4.6'
	compile('io.springfox:springfox-swagger2:2.6.1')
	//Saxon
	compile group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.9.1-5'
	compile group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.7.2'
	compile group: 'com.fasterxml.jackson.module', name:'jackson-module-kotlin', version:'2.9.8'

	implementation 'org.webjars:webjars-locator-core'
	implementation 'org.webjars:sockjs-client:1.0.2'
	implementation 'org.webjars:stomp-websocket:2.3.3'
	implementation 'org.webjars:bootstrap:3.3.7'
	implementation 'org.webjars:jquery:3.1.1-1'

	//JSONtoXML
	implementation 'org.json:json:20211205'

  	//Hibernate
	compile group:'org.hibernate', name: 'hibernate-core', version: '4.3.10.Final'
	compile group:'com.h2database', name: 'h2', version: '1.4.187'

	//Lucene
	compile('org.apache.lucene:lucene-analyzers-common:4.10.4')
	compile('org.apache.lucene:lucene-core:4.10.4')
	compile('org.apache.lucene:lucene-highlighter:4.10.4')
	compile('org.apache.lucene:lucene-memory:4.10.4')
	compile('org.apache.lucene:lucene-queries:4.10.4')
	compile('org.apache.lucene:lucene-queryparser:4.10.4')
	compile('org.apache.lucene:lucene-sandbox:4.10.4')
	compile('org.apache.lucene:lucene-suggest:4.10.4')

	//Compat
	compile('org.slf4j:log4j-over-slf4j:1.7.25')
	compile('org.jdom:jdom-legacy:1.1.3')
	compile('com.taktik.boot:spring-boot-starter-gke-logging:2.1.174-0f038f8004')

	//jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
	//compile(files(genJaxb.classesDir).builtBy(genJaxb))
	//compile 'org.mapstruct:mapstruct-jdk8:1.2.0.Final'
	//kapt 'org.mapstruct:mapstruct-processor:1.2.0.Final'

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

task ktlint(type: JavaExec, group: "verification") {
	description = "Check Kotlin code style."
	classpath = configurations.ktlint
	main = "com.github.shyiko.ktlint.Main"
	args "src/**/*.kt"
	// to generate report in checkstyle format prepend following args:
	// "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
	// see https://github.com/shyiko/ktlint#usage for more
}
//check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
	description = "Fix Kotlin code style deviations."
	classpath = configurations.ktlint
	main = "com.github.shyiko.ktlint.Main"
	args "-F", "src/**/*.kt"
}

apply plugin: 'idea'
idea {
	module {
		downloadJavadoc = true // defaults to false
		downloadSources = true
	}
}
